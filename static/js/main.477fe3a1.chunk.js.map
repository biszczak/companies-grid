{"version":3,"sources":["components/UI/SearchInput/SearchInput.js","components/Heading/Heading.js","components/TableHeader/TableHeaderRow/TableHeaderRow.js","components/TableHeader/TableHeader.js","components/UI/Spinner/Spinner.js","components/TableBody/TableBodyRow/TableBodyRow.js","components/TableBody/TableBody.js","containers/Table/Table.js","components/Footer/Footer.js","containers/TableWrapper/TableWrapper.js","common/Urls.js","App.js","serviceWorker.js","index.js"],"names":["SearchInput","props","className","disabled","data","type","placeholder","onChange","handleChange","Heading","TableHeaderRow","headerElements","id","name","sortBy","icon","sortSymbol","city","companyTotalIncome","averageIncome","lastMonthIncome","map","element","key","onClick","TableHeader","Spinner","TableBodyRow","state","loading","content","this","length","company","data-title","Component","TableBody","Table","Footer","pageNumbers","i","Math","ceil","dataLength","rowsPerPage","push","lastPage","handleSelectRowsPerPage","value","handlePaginationPageDecrease","currentPage","handlePaginationPageIncrease","TableWrapper","e","setState","target","handleSearchChange","event","searchInput","globalSearch","filteredData","dataForFilter","filter","toLowerCase","includes","toString","sortDirection","columns","compareBy","bind","getCompaniesData","a","b","dataCopy","setAllToAsc","sort","parseFloat","fetch","response","json","incomes","Date","setDate","toISOString","split","pyyyy","pmm","prevMonthIncome","forEach","income","date","incomeYear","incomeMonth","toFixed","getData","companies","companiesArr","companiesArrCopy","Promise","all","index","then","resp","r","mergedData","companyIncome","reduce","acc","val","getLastMonthIncome","indexOfLastRow","indexOfFirstRow","currentRows","slice","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.477fe3a1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { RiSearchLine } from 'react-icons/ri'\r\n\r\nimport './SearchInput.scss';\r\n\r\nconst SearchInput = (props) => {\r\n    return (\r\n        <div className=\"search-wrapper\">\r\n            <input\r\n                disabled={!props.data ? true : false}\r\n                type=\"text\"\r\n                placeholder=\"Search...\"\r\n                onChange={props.handleChange} />\r\n            <RiSearchLine className=\"search-icon\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchInput;","import React from 'react';\r\nimport SearchInput from '../UI/SearchInput/SearchInput';\r\n\r\nimport './Heading.scss'\r\n\r\n\r\nconst Heading = (props) => {\r\n    return (\r\n        <div className=\"heading\">\r\n            <h1 className=\"title\">Companies</h1>\r\n            <SearchInput handleChange={props.handleChange} data={props.data} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Heading;","import React from 'react';\r\n// import { FiChevronDown } from 'react-icons/fi';\r\n\r\nimport './TableHeaderRow.scss';\r\n\r\nconst TableHeaderRow = (props) => {\r\n    const headerElements = [\r\n        { id: 'elem1', name: 'Id', sortBy: 'id', icon: props.sortSymbol.id },\r\n        { id: 'elem2', name: 'Name', sortBy: 'name', icon: props.sortSymbol.name },\r\n        { id: 'elem3', name: 'City', sortBy: 'city', icon: props.sortSymbol.city },\r\n        { id: 'elem4', name: 'Total income', sortBy: 'companyTotalIncome', icon: props.sortSymbol.companyTotalIncome },\r\n        { id: 'elem5', name: 'Average income', sortBy: 'averageIncome', icon: props.sortSymbol.averageIncome },\r\n        { id: 'elem6', name: 'Last month income', sortBy: 'lastMonthIncome', icon: props.sortSymbol.lastMonthIncome },\r\n    ]\r\n\r\n    return (\r\n        <tr className=\"data-table__row\">\r\n            {headerElements.map(element => {\r\n                return (\r\n                    <th key={element.id}>\r\n                        <button\r\n                            className='sort-button'\r\n                            onClick={() => props.sortBy(element.sortBy)}>{element.name}</button>\r\n                        {/* {element.icon === 'desc' ? <FiChevronDown /> : null} */}\r\n                        {/* {console.log(this)} */}\r\n\r\n                    </th>\r\n                )\r\n            })}\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default TableHeaderRow;","import React, { Fragment } from 'react';\r\nimport TableHeaderRow from './TableHeaderRow/TableHeaderRow';\r\n\r\nimport './TableHeader.scss';\r\n\r\nconst TableHeader = (props) => {\r\n    return (\r\n        <Fragment>\r\n            <thead className=\"table-header\">\r\n                <TableHeaderRow\r\n                    sortBy={props.sortBy}\r\n                    sortSymbol={props.sortSymbol} />\r\n            </thead>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default TableHeader;","import React from 'react';\r\n\r\nimport './Spinner.scss';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <tr className=\"loader\"></tr>\r\n    );\r\n}\r\n\r\nexport default Spinner;","import React, { Component, Fragment } from 'react';\r\nimport Spinner from '../../UI/Spinner/Spinner';\r\n\r\n\r\n\r\nimport './TableBodyRow.scss';\r\n\r\n\r\n\r\nclass TableBodyRow extends Component {\r\n    state = {\r\n        data: this.props.data,\r\n        loading: true\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        let content;\r\n        if (!this.props.data) {\r\n            content = <Spinner />;\r\n        } else if (this.props.data.length === 0) {\r\n            content = <tr className=\"no-results\"><td><p>No search results</p></td></tr>\r\n        }\r\n        else {\r\n\r\n            content = this.props.data.map(company => (\r\n                <tr key={company.id} className=\"table-row\">\r\n                    <td data-title=\"id\">{company.id}</td>\r\n                    <td data-title=\"name\">{company.name}</td>\r\n                    <td data-title=\"city\">{company.city}</td>\r\n                    <td data-title=\"companyTotalIncome\">{company.companyTotalIncome}</td>\r\n                    <td data-title=\"averageIncome\">{company.averageIncome}</td>\r\n                    <td data-title=\"lastMonthIncome\">{company.lastMonthIncome}</td>\r\n                </tr>\r\n            )\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Fragment>\r\n                {content}\r\n            </Fragment>\r\n\r\n        )\r\n    }\r\n\r\n\r\n};\r\n\r\nexport default TableBodyRow;","import React from 'react';\r\nimport TableBodyRow from '../TableBody/TableBodyRow/TableBodyRow';\r\n\r\nimport './TableBody.scss';\r\n\r\nconst TableBody = (props) => {\r\n    return (\r\n        <tbody className=\"table-body\">\r\n            <TableBodyRow data={props.data} />\r\n        </tbody>\r\n    );\r\n}\r\n\r\nexport default TableBody;","import React, { Component } from 'react';\r\nimport TableHeader from '../../components/TableHeader/TableHeader';\r\nimport TableBody from '../../components/TableBody/TableBody';\r\n\r\nimport './Table.scss';\r\n\r\n\r\nclass Table extends Component {\r\n    state = {}\r\n\r\n    render() {\r\n        return (\r\n            <table className=\"data-table\">\r\n                {/* <input\r\n                    onChange={this.handleChange}\r\n                /> */}\r\n                <TableHeader\r\n                    sortBy={this.props.sortBy}\r\n                    sortSymbol={this.props.sortSymbol} />\r\n                <TableBody data={this.props.data} />\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Table;","import React, { Fragment } from 'react';\r\n\r\nimport { MdNavigateNext, MdNavigateBefore } from 'react-icons/md';\r\n\r\nimport './Footer.scss'\r\n\r\nconst Footer = (props) => {\r\n    const pageNumbers = [];\r\n    for (let i = 1; i <= Math.ceil(props.dataLength / props.rowsPerPage); i++) {\r\n        pageNumbers.push(i);\r\n    }\r\n    const lastPage = pageNumbers.length;\r\n    const content = (\r\n        <div className=\"footer-container\">\r\n            <div className=\"records-number\">\r\n                <p>Elements on page: </p>\r\n                <select\r\n                    onChange={props.handleSelectRowsPerPage}\r\n                    value={props.rowsPerPage}>\r\n                    <option value=\"10\">10</option>\r\n                    <option value=\"20\">20</option>\r\n                    <option value=\"50\">50</option>\r\n                    <option value=\"100\">100</option>\r\n                </select>\r\n            </div>\r\n            <div className=\"pages-counter\">\r\n                <button onClick={props.handlePaginationPageDecrease}>\r\n                    <MdNavigateBefore />\r\n                </button>\r\n                <p>{props.currentPage} of {pageNumbers.length}</p>\r\n                <button onClick={() => props.handlePaginationPageIncrease(lastPage)}>\r\n                    <MdNavigateNext />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n    return (\r\n        <Fragment>\r\n            {props.dataLength ? content : null}\r\n        </Fragment>\r\n\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport Heading from '../../components/Heading/Heading';\r\nimport Table from '../Table/Table';\r\nimport Footer from '../../components/Footer/Footer';\r\n\r\nimport { COMPANIES_API, INCOMES_API } from '../../common/Urls';\r\n\r\nimport './TableWrapper.scss';\r\n\r\nclass TableWrapper extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            data: null,\r\n            dataForFilter: null,\r\n            columns: [],\r\n            searchInput: \"\",\r\n            sortDirection: {\r\n                id: 'asc',\r\n                name: 'asc',\r\n                companyTotalIncome: 'asc',\r\n                averageIncome: 'asc',\r\n                lastMonthIncome: 'asc',\r\n                city: 'asc'\r\n            },\r\n            currentPage: 1,\r\n            rowsPerPage: 20\r\n        }\r\n        this.compareBy = this.compareBy.bind(this);\r\n        this.sortBy = this.sortBy.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.getCompaniesData();\r\n    }\r\n\r\n    handleSelectRowsPerPage = (e) => {\r\n        this.setState({\r\n            currentPage: 1,\r\n            rowsPerPage: e.target.value\r\n        })\r\n    }\r\n\r\n    handlePaginationPageIncrease = (lastPage) => {\r\n        const currentPage = this.state.currentPage;\r\n        if (currentPage < lastPage) {\r\n            this.setState({\r\n                currentPage: currentPage + 1\r\n            });\r\n        }\r\n    }\r\n\r\n    handlePaginationPageDecrease = () => {\r\n        const currentPage = this.state.currentPage;\r\n        if (currentPage > 1) {\r\n            this.setState({\r\n                currentPage: currentPage - 1\r\n            });\r\n        }\r\n    }\r\n\r\n    handleSearchChange = event => {\r\n        this.setState({ searchInput: event.target.value }, () => {\r\n            this.globalSearch();\r\n        });\r\n    };\r\n\r\n    globalSearch = () => {\r\n        let { searchInput, dataForFilter } = this.state;\r\n        let filteredData = dataForFilter.filter(value => {\r\n            return (\r\n                value.name.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n                value.city.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n                value.id.toString().toLowerCase().includes(searchInput.toLowerCase()) ||\r\n                value.averageIncome.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n                value.companyTotalIncome.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n                value.lastMonthIncome.toLowerCase().includes(searchInput.toLowerCase())\r\n            );\r\n        });\r\n        this.setState({\r\n            currentPage: 1,\r\n            data: filteredData,\r\n            sortDirection: {\r\n                id: 'asc',\r\n                name: 'asc',\r\n                companyTotalIncome: 'asc',\r\n                averageIncome: 'asc',\r\n                lastMonthIncome: 'asc',\r\n                city: 'asc'\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n    compareBy(key) {\r\n        if (this.state.sortDirection[key] === 'asc') {\r\n            return function (a, b) {\r\n                if (a[key] < b[key]) return -1;\r\n                if (a[key] > b[key]) return 1;\r\n                return 0;\r\n            };\r\n        } else {\r\n            return function (a, b) {\r\n                if (b[key] < a[key]) return -1;\r\n                if (b[key] > a[key]) return 1;\r\n                return 0;\r\n            };\r\n        }\r\n\r\n    }\r\n\r\n    sortBy(key) {\r\n        let dataCopy;\r\n        const setAllToAsc = {\r\n            id: 'asc',\r\n            name: 'asc',\r\n            companyTotalIncome: 'asc',\r\n            averageIncome: 'asc',\r\n            lastMonthIncome: 'asc',\r\n            city: 'asc'\r\n        }\r\n        this.state.filteredData ? dataCopy = [...this.state.filteredData] : dataCopy = [...this.state.data]\r\n        if (key === 'id' || key === 'companyTotalIncome' || key === 'averageIncome' || key === 'lastMonthIncome') {\r\n            dataCopy.sort((a, b) => (\r\n                this.state.sortDirection[key] === 'asc'\r\n                    ? parseFloat(a[key]) - parseFloat(b[key])\r\n                    : parseFloat(b[key]) - parseFloat(a[key])\r\n            ))\r\n            this.setState({\r\n                data: dataCopy,\r\n                sortDirection: {\r\n                    ...setAllToAsc,\r\n                    [key]: this.state.sortDirection[key] === 'asc' ? 'desc' : 'asc'\r\n                }\r\n            })\r\n        } else {\r\n            dataCopy.sort(this.compareBy(key));\r\n            this.setState({\r\n                data: dataCopy,\r\n                sortDirection: {\r\n                    ...setAllToAsc,\r\n                    [key]: this.state.sortDirection[key] === 'asc' ? 'desc' : 'asc'\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    async getData(name) {\r\n        const response = await fetch(name);\r\n        const data = await response.json();\r\n        return data;\r\n    }\r\n\r\n\r\n    getLastMonthIncome(incomes) {\r\n        const prevMonth = new Date(new Date().setDate(0)).toISOString();\r\n        const [pyyyy, pmm] = prevMonth.split(/T|:|-/);\r\n        let prevMonthIncome = 0;\r\n\r\n        incomes.forEach(income => {\r\n            const [incomeYear, incomeMonth] = income.date.split(/T|:|-/);\r\n            if ((pyyyy + pmm) === (incomeYear + incomeMonth)) {\r\n                prevMonthIncome += parseFloat(income.value);\r\n            }\r\n\r\n        });\r\n        return prevMonthIncome.toFixed(2);\r\n    }\r\n\r\n\r\n    async getCompaniesData() {\r\n        const companies = await this.getData(COMPANIES_API);\r\n        let companiesArr = [...companies];\r\n        let companiesArrCopy = [...companiesArr];\r\n\r\n        Promise.all(companiesArr.map((company, index) => fetch(`${INCOMES_API}/${company.id}`)))\r\n            .then(resp => Promise.all(resp.map(r => r.json())))\r\n            .then(data => {\r\n                const mergedData = [];\r\n                companiesArrCopy.forEach((company, index) => {\r\n                    data.forEach(income => {\r\n                        if (company.id === income.id) {\r\n                            const companyIncome = income.incomes.reduce((acc, val) => acc + parseFloat(val.value), 0);\r\n                            const averageIncome = (companyIncome / income.incomes.length).toFixed(2);\r\n                            const lastMonthIncome = this.getLastMonthIncome(income.incomes)\r\n                            const data = {\r\n                                id: company.id,\r\n                                name: company.name,\r\n                                city: company.city,\r\n                                companyTotalIncome: companyIncome.toFixed(2),\r\n                                averageIncome: averageIncome,\r\n                                lastMonthIncome: lastMonthIncome\r\n                            }\r\n                            mergedData.push(data);\r\n                        }\r\n                    })\r\n                })\r\n                this.setState({ data: mergedData, dataForFilter: mergedData })\r\n            });\r\n    }\r\n\r\n    render() {\r\n\r\n        const { data, currentPage, rowsPerPage, sortDirection } = this.state;\r\n\r\n        const indexOfLastRow = currentPage * rowsPerPage;\r\n        const indexOfFirstRow = indexOfLastRow - rowsPerPage;\r\n        const currentRows = data ? data.slice(indexOfFirstRow, indexOfLastRow) : null;\r\n\r\n        return (\r\n            <div className=\"table-wrapper\">\r\n                <Heading\r\n                    handleChange={this.handleSearchChange}\r\n                    data={currentRows} />\r\n                <Table\r\n                    data={currentRows}\r\n                    sortBy={this.sortBy}\r\n                    sortSymbol={sortDirection} />\r\n                <Footer\r\n                    dataLength={data ? data.length : null}\r\n                    rowsPerPage={rowsPerPage}\r\n                    currentPage={currentPage}\r\n                    handleSelectRowsPerPage={this.handleSelectRowsPerPage}\r\n                    handlePaginationPageIncrease={this.handlePaginationPageIncrease}\r\n                    handlePaginationPageDecrease={this.handlePaginationPageDecrease} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TableWrapper;","export const COMPANIES_API = \"https://recruitment.hal.skygate.io/companies\";\r\nexport const INCOMES_API = \"https://recruitment.hal.skygate.io/incomes\";","import React from 'react';\nimport TableWrapper from './containers/TableWrapper/TableWrapper';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TableWrapper />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './globalStyles.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}